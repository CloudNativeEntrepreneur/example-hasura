{{- if .Values.knativeDeploy }}
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: {{ .Values.service.name }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
  annotations:
{{- if .Values.knative.subdomain }}
    custom-hostname: {{ .Values.knative.subdomain }}
{{- end }}
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/minScale: {{ .Values.knative.minScale | quote }}
        autoscaling.knative.dev/maxScale: {{ .Values.knative.maxScale | quote }}
    spec:
      containers:
      - image: hasura/graphql-engine:v2.0.10
        ports:
        - containerPort: {{ .Values.service.internalPort }}
          protocol: TCP
        env:
        - name: METADATA_POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.hasura.psql.username }}.{{ .Values.hasura.psql.name }}.credentials.postgresql.acid.zalan.do
              key: username
        - name: METADATA_POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.hasura.psql.username }}.{{ .Values.hasura.psql.name }}.credentials.postgresql.acid.zalan.do
              key: password
        - name: METADATA_POSTGRES_DATABASE
          value: {{ .Values.hasura.psql.database }}
        - name: METADATA_POSTGRES_HOST
          value: {{ .Values.hasura.psql.name }}.{{ .Release.Namespace }}.svc.cluster.local
        - name: METADATA_POSTGRES_PORT
          value: "5432"
        - name: HASURA_GRAPHQL_METADATA_DATABASE_URL
          value: postgres://$(METADATA_POSTGRES_USERNAME):$(METADATA_POSTGRES_PASSWORD)@$(METADATA_POSTGRES_HOST):$(METADATA_POSTGRES_PORT)/$(METADATA_POSTGRES_DATABASE)
        - name: READMODEL_POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.readmodel.psql.username }}.{{ .Values.readmodel.psql.name }}.credentials.postgresql.acid.zalan.do
              key: username
        - name: READMODEL_POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.readmodel.psql.username }}.{{ .Values.readmodel.psql.name }}.credentials.postgresql.acid.zalan.do
              key: password
        - name: READMODEL_POSTGRES_DATABASE
          value: {{ .Values.readmodel.psql.database }}
        - name: READMODEL_POSTGRES_HOST
          value: {{ .Values.readmodel.psql.hostname.write }}.{{ .Release.Namespace }}.svc.cluster.local
        - name: READMODEL_POSTGRES_PORT
          value: "5432"
        - name: HASURA_GRAPHQL_DATABASE_URL
          value: postgres://$(READMODEL_POSTGRES_USERNAME):$(READMODEL_POSTGRES_PASSWORD)@$(READMODEL_POSTGRES_HOST):$(READMODEL_POSTGRES_PORT)/$(READMODEL_POSTGRES_DATABASE)
        ## enable the console served by server - need to run `hasura console` to access instead
        - name: HASURA_GRAPHQL_ENABLE_CONSOLE
          value: "false"
        ## enable debugging mode. It is recommended to disable this in production
        - name: HASURA_GRAPHQL_DEV_MODE
          value: {{ .Values.hasura.devMode | quote }}
        - name: HASURA_GRAPHQL_CORS_DOMAIN
          value: '*'
        - name: HASURA_GRAPHQL_ADMIN_SECRET
          value: af18a72fc1eb42a78aa8c6d679b4842a
        - name: HASURA_GRAPHQL_JWT_SECRET
          value: '{"type":"HS256", "key": "a114d68b22894049a7c2203a7228fdcde922a1210675427795b7bf9a0317e16d"}'
{{- range $pkey, $pval := .Values.env }}
        - name: {{ $pkey }}
          value: {{ quote $pval }}
{{- end }}
        # livenessProbe:
        #   httpGet:
        #     path: {{ .Values.livenessProbe.probePath | default .Values.probePath }}
        # readinessProbe:
        #   httpGet:
        #     path: {{ .Values.livenessProbe.probePath | default .Values.probePath }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
{{- end }}